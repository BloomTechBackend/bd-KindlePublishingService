<?xml version="1.0"?>
<project xmlns:ht="happytrails" name="ATACurriculumKindlePublishingService-C2020July" basedir="." default="release"
         xmlns:coral="antlib:com.amazon.coral" xmlns:if="ant:if">
    <!-- Determine if this is a developer local build box -->
    <condition property="onmac">
        <os family="mac"/>
    </condition>

    <!-- Import happy trails to start with. -->
    <import file="${happytrails.root}/happytrails.xml" optional="false"/>

    <!-- Project specific properties -->
    <property name="configuration.dir" location="${basedir}/configuration" />

    <property name="coral-src.dir" location="${output.dir}/private/src" />
    <property name="coral-tst.dir" location="${output.dir}/private/tst" />
    <property name="coral-model-package" value="ATACurriculumKindlePublishingServiceModel" />

    <!-- Ignore generated Dagger code when calculating coverage -->
    <property name="coverage.exclude.instrument.pattern"
              value="**/exceptions/**,**/inject/**,**/*Module.class,**/dagger/**,**/*_*Factory.class,
                     **/GeneratedInvoker_ATACurriculumKindlePublishingService_*.class,**/health/**"/>

    <property name="unit.test.minimum.coverage.lines" value="0.90"/>
    <property name="unit.test.minimum.coverage.branches" value="0.90"/>

    <property name="ht.include.cfg" value="true" />
    <!-- To make sure we preserve file permissions -->
    <ht:import file="copy-with-permissions.xml"/>

    <property name="findbugs.failOnError" value="true" />
    <property name="checkstyle.failOnError" value="true" />

    <property name="checkstyle.configuration.file" value="${bp:[ATACheckstyle]pkg.src}/configuration/checkstyle/checkstyle.xml"/>
    <property name="checkstyle.suppression.filter" value="${bp:[ATACheckstyle]pkg.src}/configuration/checkstyle/unit4/suppressions.xml"/>
    
    <ht:import file="coral-dagger-build.xml" optional="false" />
    <!-- Import other things after props, HappierTrails and Coral helpers -->
    <ht:import file="coral-generator.xml"   optional="false"/>
    <ht:import file="happier-trails.xml" optional="false"/>
    <ht:import file="generate-wrapper.xml" optional="false"/>
    <!-- Bring in the classpath validator -->
    <ht:import file="validate-classpath.xml" optional="false"/>

    <!-- Generate the Apollo script to start your service
         Note: When modifying properties/env/jvmargs/etc here, remember to also
         update the server target as well
    -->
    <target name="apollo-script" extensionOf="ht-post-build">
        <generate-wrapper target="${output.dir}/bin/run-service.sh" classname="com.amazon.ata.kindlepublishingservice.dagger.GeneratedCoralLauncher">

            <jvmarg value="-server"/>
            <jvmarg value="-XX:+UseG1GC"/>
            <jvmarg value="-XX:MaxGCPauseMillis=100"/>
            <jvmarg value="-XX:+PerfDisableSharedMem"/>
            <jvmarg value="-Dsun.net.inetaddr.negative.ttl=1"/>

            <!-- Kill on OOM (logscan for PMAdmin.log will trigger an alarm) -->
            <jvmarg value="-XX:+ExitOnOutOfMemoryError"/>
            <!-- Enable the debug port if we're building on a laptop, i.e. for RDE-->
            <jvmarg if:set="onmac"
                    value="-agentlib:jdwp=transport=dt_socket,address=localhost:5054,server=y,suspend=n"/>

            <env key="CORAL_CONFIG_PATH" value="${ENVROOT}/coral-config" escape="false"/>

            <sysproperty key="javax.net.ssl.trustStore" value="${ENVROOT}/certs/InternalAndExternalTrustStore.jks" escape="false"/>
            <sysproperty key="javax.net.ssl.trustStorePassword" value="amazon"/>

            <!-- Idle client connections are closed after 20 seconds. The current
                 default idle connection timeout for netscaler VIPs is 180 seconds,
                 meaning idle client connections will close before a VIP reaps the
                 connection from its idle connection pool. In general, this prevents
                 connections from going stale and removes the need to check for
                 stale connections. Stale connection checking has
                 been disabled for the BSFJavaClient in brazil config.
            -->
            <sysproperty key="timeout.close.idle.connections" value="20"/>

            <sysproperty key="log4j.configurationFile" value="file:${ENVROOT}/log-configuration/log4j2-container.xml" escape="false"/>

            <sysproperty key="java.util.logging.manager" value="org.apache.logging.log4j.jul.LogManager"/>
            <sysproperty key="Log4jContextSelector" value="org.apache.logging.log4j.core.async.AsyncLoggerContextSelector"/>

            <sysproperty key="root" value="${ENVROOT}" escape="false"/>

            <sysproperty key="AppConfig.app" value="ATACurriculumKindlePublishingService" />
            <sysproperty key="AppConfig.appgroup" value="KindlePublishing" />
            <arg line="--root=${ENVROOT}"/>
            <arg line="--domain=${DOMAIN}"/>
            <arg line="--realm=${REALM}"/>
        </generate-wrapper>
    </target>

    <!--
        Generate the service types, model index, and abstract activities. You can also generate service explorer here
        if it is needed in your test/development  environments. Please use Coral Diver instead of Coral Service Explorer in
        Production environments as it is not secure to use service explorer in Production services -   
    -->
    <target name="generate">
        <mkdir dir="${coral-src.dir}" />
        <!-- Generate the source -->
        <coral:generate dir="${coral-src.dir}" mode="types,index,server,explorer" stalecheck="true">
            <package name="${coral-model-package}"/>
        </coral:generate>
        <!-- Compile the coral source -->
        <ht:compile srcdir="${coral-src.dir}" destdir="${generated.classes.dir}" />
    </target>

    <!-- Generate activity stubs into src directory -->
    <target name="generate-stubs">
        <!-- Generate the source -->
        <coral:generate dir="${sources.dir}" mode="stub" stalecheck="false">
            <package name="${coral-model-package}"/>
        </coral:generate>
    </target>

    <!-- Generate the Java client for unit tests -->
    <target name="test-generate" depends="compile">
        <mkdir dir="${coral-tst.dir}" />
        <!-- Generate the source -->
        <coral:generate dir="${coral-tst.dir}" mode="javaclient" stalecheck="true">
            <package name="${coral-model-package}"/>
        </coral:generate>
        <!-- Compile the coral source -->
        <ht:compile srcdir="${coral-tst.dir}" destdir="${testclasses.dir}">
          <extra-classpath>
            <path path="${bp:testbuild.classpath}" />
          </extra-classpath>
        </ht:compile>
    </target>

    <!-- Copy anything in the static-content directory to the server static area -->
    <target name="copy-static-content">
        <mkdir dir="${output.dir}/private/static-content" />
        <mkdir dir="${output.dir}/static-content" />
        <copy todir="${output.dir}/private/static-content">
            <fileset dir="${basedir}/static-content" erroronmissingdir="false" />
        </copy>
        <copy todir="${output.dir}/static-content">
            <fileset dir="${basedir}/static-content" erroronmissingdir="false" />
        </copy>
    </target>

    <!-- Copy files necessary for bb-server to work. -->
    <target name="setup-server">
        <copy todir="${output.dir}/private">
            <fileset dir="${bp:run.configfarm.brazil-config}">
                <include name="brazil-config/**/*"/>
            </fileset>
            <fileset dir="${bp:run.configfarm.certs}">
                <include name="certs/**/*"/>
            </fileset>
        </copy>
    </target>

    <!-- This taget enables classpath validation. This is a best practice that should not be disabled.
    This target helps ensure that there are not conflicting class definitions that get passed to your JVM on start.
    There have been quite a few COEs about this - so we enable it by default.
    https://w.amazon.com/bin/view/BrazilBuildSystem/JavaClassConflictDetector/
    https://w.amazon.com/index.php/AWS/Mobile/IoT/Internal/Developer/ValidateClasspath
    -->
    <target name="validate-classpath">
        <ht:validateClasspath classpath="${bp:run.classpath}" failOnConflicts="false" />
    </target>

    <target name="compile" depends="generate,standard-compile" />
    <target name="test-compile" depends="test-generate,standard-test-compile" />
    <target name="build" depends="validate-classpath,standard-build,relative-classpath-file,copy-static-content,setup-server" />

    <target name="copy-project-scripts" extensionOf="ht-post-compile" if="onmac">
        <echo>Copying rde scripts</echo>
        <mkdir dir="${basedir}/configuration/stack-exec"/>
        <copy todir="${basedir}/configuration/stack-exec" overwrite="true">
            <fileset dir="${bp:[ATACurriculum_JavaProjectResources]pkg.configfarm.scripts}/scripts/rde"/>
            <flattenmapper/>
        </copy>

        <echo>Overwriting local repositories git hooks.</echo>
        <symlink link="${basedir}/.git/hooks/pre-push"
                 resource="${bp:[ATACurriculum_JavaProjectResources]pkg.configfarm.scripts}/scripts/git-hooks/pre-push" overwrite="true" />
        <symlink link="${basedir}/.git/hooks/prepare-commit-msg"
                 resource="${bp:[ATACurriculum_JavaProjectResources]pkg.configfarm.scripts}/scripts/git-hooks/prepare-commit-msg" overwrite="true" />
        <symlink link="${basedir}/.git/hooks/commit-msg"
                 resource="${bp:[ATACurriculum_JavaProjectResources]pkg.configfarm.scripts}/scripts/git-hooks/commit-msg" overwrite="true" />
    </target>
</project>
